#!/usr/bin/env ruby

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib voodoo]))
require 'rubygems'
require 'commander/import'

program :name, 'Voodoo'
program :version, Voodoo::VERSION
program :description, 'Black Magic Utility for PeopleSoft Administration'

global_option('--debug') { Voodoo.show_debugging }

command :add do |c|
  c.syntax = 'voodoo add [environment name]'
  c.summary = 'Adds an environment to the configuration file'
  c.description = 'Prompts for environment information and saves it to the environment configuration file'
  c.example 'Prompt for setup values before adding VDDMO to the configuration file', 'voodoo add VDDMO'
  c.action do |args|
    Voodoo::Commands.add(args)
  end
end

command :remove do |c|
  c.syntax = 'voodoo remove [environment name]'
  c.summary = 'Removes an environment from the configuration file'
  c.description = 'Deletes the specified environment from the configuration file'
  c.example 'Removes the environment VDDMO from the configuration file', 'voodoo remove VDDMO'
  c.action do |args|
    Voodoo::Commands.remove(args)
  end
end

command :list do |c|
  c.syntax = 'voodoo list'
  c.summary = 'Outputs a list of configured environments'
  c.description = 'Shows a list of all environments in the configuration file'
  c.example 'List all environments', 'voodoo list'
  c.action do |args|
    c.when_called Voodoo::Commands.list
  end
end

command :show do |c|
  c.syntax = 'voodoo show [environment name]'
  c.summary = 'Shows configuration details for an environment'
  c.description = 'Outputs a table containing information about the specified environment'
  c.example 'Show information about VDDMO', 'voodoo show VDDMO'
  c.action do |args|
    Voodoo::Commands.show(args)
  end
end

command :config do |c|
  c.syntax = 'voodoo config'
  c.summary = 'Create global configuration settings'
  c.description = 'Prompts for global configuration information and saves it to the configuration file'
  c.action do |args, options|
    c.when_called Voodoo::Commands.config
  end
end

command :compare do |c|
  c.syntax = 'voodoo compare [project] [source] [target]'
  c.summary = 'Create a compare report for the specified project'
  c.description = 'Creates an HTML compare report for the specified project and opens it in the default browser'
  c.example 'Create a compare report between two environments', 'voodoo compare EXAMPLE_PROJECT VDDEV VDTEST'
  c.action do |args|
    Voodoo::Commands.compare(args)
  end
end

command :build do |c|
  c.syntax = 'voodoo build [project] [environment]'
  c.summary = 'Builds a project definition in the specified environment'
  c.description = 'Builds a project definition script for the specified project using AppDesigner and executes it in the target database'
  c.example 'Build specified project', 'voodoo build EXAMPLE_PROJECT VDTEST'
  c.action do |args|
    Voodoo::Commands.build(args)
  end
end

command :archive do |c|
  c.syntax = 'voodoo archive [project] [environment]'
  c.summary = 'Copies a project to file from the specified environment'
  c.description = 'Copies a project from the specified environment to file in the output directory'
  c.example 'Archive specified project', 'voodoo archive EXAMPLE_PROJECT VDTEST'
  c.action do |args|
    Voodoo::Commands.archive(args)
  end
end

command :migrate do |c|
  c.syntax = 'voodoo migrate [project] [source] [target]'
  c.summary = 'Migrates a project between environments'
  c.description = 'Migrates a project between two environments after running a compare report and copying the objects to file'
  #c.option '--prefix STRING', String, 'Adds a prefix to bar'
  c.example 'Migrate project between environments', 'voodoo migrate EXAMPLE_PROJECT VDDEV VDTEST'
  c.action do |args|
    Voodoo::Commands.migrate(args)
  end
end

command :'run appengine' do |c|
  c.syntax = 'voodoo run appengine [ae_name] [environment]'
  c.summary = 'Runs an appengine against the specified environment'
  c.description = 'Runs an appengine against the specified PeopleSoft environment'
  c.example 'Run the VERSION appengine agains VDTEST', 'voodoo run appengine VERSION VDTEST'
  c.action do |args|
    Voodoo::Commands.run_appengine(args)
  end
end

command :'run sqr' do |c|
  c.syntax = 'voodoo run sqr [sqr name] [environment]'
  c.summary = 'Runs the specified sqr locally'
  c.description = 'Run the specified SQR locally using the sqr bin specified in the environment configuration.'
  c.example 'Run SQR', 'voodoo run sqr SETSPACE.sqr VDDEV'
  c.action do |args|
    Voodoo::Commands.run_sqr(args)
  end
end

command :'template datafix' do |c|
  c.syntax = 'voodoo template datafix [output folder]'
  c.summary = 'Creates a datafix folder with sample files'
  c.description = 'Create a folder and populate sample files to be updated with datafix SQL.'
  c.example 'Create datafix folder', 'voodoo template datafix SAMPLE_DATAFIX'
  c.action do |args|
    Voodoo::Commands.template_datafix(args)
  end
end

